// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: testservice.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TestserviceService_CreateTestservice_FullMethodName = "/pb.TestserviceService/CreateTestservice"
	TestserviceService_GetTestservice_FullMethodName    = "/pb.TestserviceService/GetTestservice"
	TestserviceService_UpdateTestservice_FullMethodName = "/pb.TestserviceService/UpdateTestservice"
	TestserviceService_DeleteTestservice_FullMethodName = "/pb.TestserviceService/DeleteTestservice"
	TestserviceService_ListTestservices_FullMethodName  = "/pb.TestserviceService/ListTestservices"
)

// TestserviceServiceClient is the client API for TestserviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestserviceServiceClient interface {
	CreateTestservice(ctx context.Context, in *CreateTestserviceRequest, opts ...grpc.CallOption) (*CreateTestserviceResponse, error)
	GetTestservice(ctx context.Context, in *GetTestserviceRequest, opts ...grpc.CallOption) (*GetTestserviceResponse, error)
	UpdateTestservice(ctx context.Context, in *UpdateTestserviceRequest, opts ...grpc.CallOption) (*UpdateTestserviceResponse, error)
	DeleteTestservice(ctx context.Context, in *DeleteTestserviceRequest, opts ...grpc.CallOption) (*DeleteTestserviceResponse, error)
	ListTestservices(ctx context.Context, in *ListTestservicesRequest, opts ...grpc.CallOption) (*ListTestservicesResponse, error)
}

type testserviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestserviceServiceClient(cc grpc.ClientConnInterface) TestserviceServiceClient {
	return &testserviceServiceClient{cc}
}

func (c *testserviceServiceClient) CreateTestservice(ctx context.Context, in *CreateTestserviceRequest, opts ...grpc.CallOption) (*CreateTestserviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTestserviceResponse)
	err := c.cc.Invoke(ctx, TestserviceService_CreateTestservice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testserviceServiceClient) GetTestservice(ctx context.Context, in *GetTestserviceRequest, opts ...grpc.CallOption) (*GetTestserviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTestserviceResponse)
	err := c.cc.Invoke(ctx, TestserviceService_GetTestservice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testserviceServiceClient) UpdateTestservice(ctx context.Context, in *UpdateTestserviceRequest, opts ...grpc.CallOption) (*UpdateTestserviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTestserviceResponse)
	err := c.cc.Invoke(ctx, TestserviceService_UpdateTestservice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testserviceServiceClient) DeleteTestservice(ctx context.Context, in *DeleteTestserviceRequest, opts ...grpc.CallOption) (*DeleteTestserviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTestserviceResponse)
	err := c.cc.Invoke(ctx, TestserviceService_DeleteTestservice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testserviceServiceClient) ListTestservices(ctx context.Context, in *ListTestservicesRequest, opts ...grpc.CallOption) (*ListTestservicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTestservicesResponse)
	err := c.cc.Invoke(ctx, TestserviceService_ListTestservices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestserviceServiceServer is the server API for TestserviceService service.
// All implementations must embed UnimplementedTestserviceServiceServer
// for forward compatibility.
type TestserviceServiceServer interface {
	CreateTestservice(context.Context, *CreateTestserviceRequest) (*CreateTestserviceResponse, error)
	GetTestservice(context.Context, *GetTestserviceRequest) (*GetTestserviceResponse, error)
	UpdateTestservice(context.Context, *UpdateTestserviceRequest) (*UpdateTestserviceResponse, error)
	DeleteTestservice(context.Context, *DeleteTestserviceRequest) (*DeleteTestserviceResponse, error)
	ListTestservices(context.Context, *ListTestservicesRequest) (*ListTestservicesResponse, error)
	mustEmbedUnimplementedTestserviceServiceServer()
}

// UnimplementedTestserviceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTestserviceServiceServer struct{}

func (UnimplementedTestserviceServiceServer) CreateTestservice(context.Context, *CreateTestserviceRequest) (*CreateTestserviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestservice not implemented")
}
func (UnimplementedTestserviceServiceServer) GetTestservice(context.Context, *GetTestserviceRequest) (*GetTestserviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestservice not implemented")
}
func (UnimplementedTestserviceServiceServer) UpdateTestservice(context.Context, *UpdateTestserviceRequest) (*UpdateTestserviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestservice not implemented")
}
func (UnimplementedTestserviceServiceServer) DeleteTestservice(context.Context, *DeleteTestserviceRequest) (*DeleteTestserviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestservice not implemented")
}
func (UnimplementedTestserviceServiceServer) ListTestservices(context.Context, *ListTestservicesRequest) (*ListTestservicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestservices not implemented")
}
func (UnimplementedTestserviceServiceServer) mustEmbedUnimplementedTestserviceServiceServer() {}
func (UnimplementedTestserviceServiceServer) testEmbeddedByValue()                            {}

// UnsafeTestserviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestserviceServiceServer will
// result in compilation errors.
type UnsafeTestserviceServiceServer interface {
	mustEmbedUnimplementedTestserviceServiceServer()
}

func RegisterTestserviceServiceServer(s grpc.ServiceRegistrar, srv TestserviceServiceServer) {
	// If the following call pancis, it indicates UnimplementedTestserviceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TestserviceService_ServiceDesc, srv)
}

func _TestserviceService_CreateTestservice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestserviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestserviceServiceServer).CreateTestservice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestserviceService_CreateTestservice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestserviceServiceServer).CreateTestservice(ctx, req.(*CreateTestserviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestserviceService_GetTestservice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestserviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestserviceServiceServer).GetTestservice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestserviceService_GetTestservice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestserviceServiceServer).GetTestservice(ctx, req.(*GetTestserviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestserviceService_UpdateTestservice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestserviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestserviceServiceServer).UpdateTestservice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestserviceService_UpdateTestservice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestserviceServiceServer).UpdateTestservice(ctx, req.(*UpdateTestserviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestserviceService_DeleteTestservice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestserviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestserviceServiceServer).DeleteTestservice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestserviceService_DeleteTestservice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestserviceServiceServer).DeleteTestservice(ctx, req.(*DeleteTestserviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestserviceService_ListTestservices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestservicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestserviceServiceServer).ListTestservices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestserviceService_ListTestservices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestserviceServiceServer).ListTestservices(ctx, req.(*ListTestservicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestserviceService_ServiceDesc is the grpc.ServiceDesc for TestserviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestserviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TestserviceService",
	HandlerType: (*TestserviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTestservice",
			Handler:    _TestserviceService_CreateTestservice_Handler,
		},
		{
			MethodName: "GetTestservice",
			Handler:    _TestserviceService_GetTestservice_Handler,
		},
		{
			MethodName: "UpdateTestservice",
			Handler:    _TestserviceService_UpdateTestservice_Handler,
		},
		{
			MethodName: "DeleteTestservice",
			Handler:    _TestserviceService_DeleteTestservice_Handler,
		},
		{
			MethodName: "ListTestservices",
			Handler:    _TestserviceService_ListTestservices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testservice.proto",
}
